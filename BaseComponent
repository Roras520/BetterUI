local BaseComponent = {}
BaseComponent.__index = BaseComponent

-- Type definitions
export type ComponentConfig = {
    Name: string,
    Parent: Instance?,
    Position: UDim2?,
    Size: UDim2?,
    Visible: boolean?,
}

export type Component = {
    Name: string,
    Instance: Instance,
    Parent: Instance?,
    Config: ComponentConfig,
    Connections: {[string]: RBXScriptConnection},
    Children: {[string]: Component},
    
    new: (config: ComponentConfig) -> Component,
    Destroy: (self: Component) -> boolean,
    SetVisible: (self: Component, visible: boolean) -> boolean,
    SetParent: (self: Component, parent: Instance) -> boolean,
    AddChild: (self: Component, child: Component) -> boolean,
    RemoveChild: (self: Component, name: string) -> boolean,
    GetChild: (self: Component, name: string) -> Component?,
    Connect: (self: Component, event: string, callback: (any) -> ()) -> RBXScriptConnection?,
    Disconnect: (self: Component, connectionName: string) -> boolean,
}

-- Constructor
function BaseComponent.new(config: ComponentConfig): Component
    if not config or type(config) ~= "table" then
        error("BaseComponent: Invalid config provided")
    end
    
    if not config.Name or type(config.Name) ~= "string" then
        error("BaseComponent: Component must have a name")
    end
    
    local self = setmetatable({}, BaseComponent)
    
    self.Name = config.Name
    self.Parent = config.Parent
    self.Config = config
    self.Connections = {}
    self.Children = {}
    
    return self
end

-- Destroy component and cleanup
function BaseComponent:Destroy(): boolean
    local success, result = pcall(function()
        for name, connection in pairs(self.Connections) do
            if connection and connection.Connected then
                connection:Disconnect()
            end
        end
        self.Connections = {}
        
        for name, child in pairs(self.Children) do
            if child and child.Destroy then
                child:Destroy()
            end
        end
        self.Children = {}
        
        if self.Instance and self.Instance.Parent then
            self.Instance:Destroy()
        end
    end)
    
    if not success then
        warn("BaseComponent: Failed to destroy component:", result)
        return false
    end
    
    return true
end

function BaseComponent:SetVisible(visible: boolean): boolean
    if type(visible) ~= "boolean" then
        warn("BaseComponent: Visible must be a boolean")
        return false
    end
    
    local success, result = pcall(function()
        if self.Instance then
            self.Instance.Visible = visible
        end
    end)
    
    if not success then
        warn("BaseComponent: Failed to set visibility:", result)
        return false
    end
    
    return true
end

function BaseComponent:SetParent(parent: Instance): boolean
    if not parent or not parent:IsA("Instance") then
        warn("BaseComponent: Invalid parent instance")
        return false
    end
    
    local success, result = pcall(function()
        if self.Instance then
            self.Instance.Parent = parent
        end
        self.Parent = parent
    end)
    
    if not success then
        warn("BaseComponent: Failed to set parent:", result)
        return false
    end
    
    return true
end

function BaseComponent:AddChild(child: Component): boolean
    if not child or not child.Name then
        warn("BaseComponent: Invalid child component")
        return false
    end
    
    if self.Children[child.Name] then
        warn("BaseComponent: Child with name '" .. child.Name .. "' already exists")
        return false
    end
    
    local success, result = pcall(function()
        self.Children[child.Name] = child
        if child.SetParent then
            child:SetParent(self.Instance)
        end
    end)
    
    if not success then
        warn("BaseComponent: Failed to add child:", result)
        return false
    end
    
    return true
end

function BaseComponent:RemoveChild(name: string): boolean
    if not name or type(name) ~= "string" then
        warn("BaseComponent: Invalid child name")
        return false
    end
    
    local child = self.Children[name]
    if not child then
        warn("BaseComponent: Child '" .. name .. "' not found")
        return false
    end
    
    local success, result = pcall(function()
        if child.Destroy then
            child:Destroy()
        end
        self.Children[name] = nil
    end)
    
    if not success then
        warn("BaseComponent: Failed to remove child:", result)
        return false
    end
    
    return true
end

function BaseComponent:GetChild(name: string): Component?
    if not name or type(name) ~= "string" then
        warn("BaseComponent: Invalid child name")
        return nil
    end
    
    return self.Children[name]
end

function BaseComponent:Connect(event: string, callback: (any) -> ()): RBXScriptConnection?
    if not event or type(event) ~= "string" then
        warn("BaseComponent: Invalid event name")
        return nil
    end
    
    if not callback or type(callback) ~= "function" then
        warn("BaseComponent: Invalid callback function")
        return nil
    end
    
    if not self.Instance then
        warn("BaseComponent: No instance to connect to")
        return nil
    end
    
    local success, result = pcall(function()
        local connection = self.Instance[event]:Connect(callback)
        self.Connections[event] = connection
        return connection
    end)
    
    if not success then
        warn("BaseComponent: Failed to connect to event:", result)
        return nil
    end
    
    return result
end

function BaseComponent:Disconnect(connectionName: string): boolean
    if not connectionName or type(connectionName) ~= "string" then
        warn("BaseComponent: Invalid connection name")
        return false
    end
    
    local connection = self.Connections[connectionName]
    if not connection then
        warn("BaseComponent: Connection '" .. connectionName .. "' not found")
        return false
    end
    
    local success, result = pcall(function()
        if connection.Connected then
            connection:Disconnect()
        end
        self.Connections[connectionName] = nil
    end)
    
    if not success then
        warn("BaseComponent: Failed to disconnect:", result)
        return false
    end
    
    return true
end

return BaseComponent
