--[[
    BetterUI Library
    Version: 2.0.0
    Author: Me and my buddy Claude
]]

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local TextService = game:GetService("TextService")

-- Import components
function githubDirectory(string)
    return "https://raw.githubusercontent.com/Roras520/BetterUI/refs/heads/main/" .. string
end
local BaseComponent = loadstring(game:HttpGet(githubDirectory("BaseComponent")))()
local Button = loadstring(game:HttpGet(githubDirectory("Components/Button")))()
local Toggle = loadstring(game:HttpGet(githubDirectory("Components/Toggle")))()
local Slider = loadstring(game:HttpGet(githubDirectory("Components/Slider")))()
local Dropdown = loadstring(game:HttpGet(githubDirectory("Components/Dropdown")))()
local ColorPicker = loadstring(game:HttpGet(githubDirectory("Components/ColorPicker")))()

-- Main library
local BetterUI = {}
BetterUI.__index = BetterUI

-- Constants
local ANIMATION_SPEED = 0.2
local HOVER_CHANGE = 0.07
local DEFAULT_EASING = Enum.EasingStyle.Exponential
local DEFAULT_EASING_DIRECTION = Enum.EasingDirection.Out

-- Private state
local _instance = nil
local _activeWindow = nil
local _cleanupConnections = {}
local _themeObjects = {}
local _flags = {}
local _configs = {}
local _notifications = {}

-- Type definitions
export type Theme = {
    Accent: Color3,
    ElementColor: Color3,
    ElementBorder: Color3,
    TextColor: Color3,
    SubTextColor: Color3,
    SectionBG: Color3,
    MainBG: Color3,
    TitleBarLine: Color3,
    TabUnselected: Color3,
    SectionBorder: Color3,
}

export type WindowConfig = {
    Title: string,
    Size: Vector2,
    Position: Vector2?,
    Resizable: boolean?,
    Minimizable: boolean?,
    Closable: boolean?,
}

export type NotificationConfig = {
    Title: string,
    Message: string,
    Type: "success" | "error" | "warning" | "info",
    Duration: number?,
}

export type SectionConfig = {
    Name: string,
    Parent: Instance?,
    Position: UDim2?,
    Size: UDim2?,
    Text: string?,
    Collapsible: boolean?,
    DefaultCollapsed: boolean?,
}

export type TabConfig = {
    Name: string,
    Parent: Instance?,
    Position: UDim2?,
    Size: UDim2?,
    Text: string?,
    Icon: string?,
}

-- Built-in themes
local THEMES: {[string]: Theme} = {
    Default = {
        Accent = Color3.fromRGB(86, 195, 245),
        ElementColor = Color3.fromRGB(110, 110, 110),
        ElementBorder = Color3.fromRGB(25, 25, 25),
        TextColor = Color3.fromRGB(230, 230, 230),
        SubTextColor = Color3.fromRGB(160, 160, 160),
        SectionBG = Color3.fromRGB(35, 35, 35),
        MainBG = Color3.fromRGB(35, 35, 35),
        TitleBarLine = Color3.fromRGB(65, 65, 65),
        TabUnselected = Color3.fromRGB(90, 90, 90),
        SectionBorder = Color3.fromRGB(45, 45, 50),
    },
    Midnight = {
        Accent = Color3.fromRGB(120, 130, 255),
        ElementColor = Color3.fromRGB(85, 90, 110),
        ElementBorder = Color3.fromRGB(20, 25, 35),
        TextColor = Color3.fromRGB(220, 225, 240),
        SubTextColor = Color3.fromRGB(140, 145, 165),
        SectionBG = Color3.fromRGB(25, 30, 45),
        MainBG = Color3.fromRGB(18, 22, 35),
        TitleBarLine = Color3.fromRGB(50, 55, 75),
        TabUnselected = Color3.fromRGB(70, 75, 95),
        SectionBorder = Color3.fromRGB(40, 45, 65),
    },
    Aqua = {
        Accent = Color3.fromRGB(0, 255, 255),
        ElementColor = Color3.fromRGB(70, 115, 115),
        ElementBorder = Color3.fromRGB(15, 35, 35),
        TextColor = Color3.fromRGB(220, 245, 245),
        SubTextColor = Color3.fromRGB(140, 185, 185),
        SectionBG = Color3.fromRGB(20, 40, 45),
        MainBG = Color3.fromRGB(15, 30, 35),
        TitleBarLine = Color3.fromRGB(45, 75, 80),
        TabUnselected = Color3.fromRGB(60, 95, 100),
        SectionBorder = Color3.fromRGB(35, 65, 70),
    },
    Amethyst = {
        Accent = Color3.fromRGB(200, 120, 255),
        ElementColor = Color3.fromRGB(100, 85, 120),
        ElementBorder = Color3.fromRGB(30, 20, 40),
        TextColor = Color3.fromRGB(235, 220, 245),
        SubTextColor = Color3.fromRGB(175, 150, 190),
        SectionBG = Color3.fromRGB(35, 25, 50),
        MainBG = Color3.fromRGB(25, 18, 40),
        TitleBarLine = Color3.fromRGB(65, 50, 85),
        TabUnselected = Color3.fromRGB(80, 65, 100),
        SectionBorder = Color3.fromRGB(50, 40, 70),
    },
    Rose = {
        Accent = Color3.fromRGB(255, 100, 150),
        ElementColor = Color3.fromRGB(120, 85, 100),
        ElementBorder = Color3.fromRGB(40, 20, 30),
        TextColor = Color3.fromRGB(245, 220, 230),
        SubTextColor = Color3.fromRGB(190, 150, 170),
        SectionBG = Color3.fromRGB(45, 25, 35),
        MainBG = Color3.fromRGB(35, 18, 28),
        TitleBarLine = Color3.fromRGB(80, 50, 65),
        TabUnselected = Color3.fromRGB(100, 65, 80),
        SectionBorder = Color3.fromRGB(65, 40, 55),
    },
    Dark = {
        Accent = Color3.fromRGB(100, 180, 255),
        ElementColor = Color3.fromRGB(60, 60, 60),
        ElementBorder = Color3.fromRGB(15, 15, 15),
        TextColor = Color3.fromRGB(220, 220, 220),
        SubTextColor = Color3.fromRGB(150, 150, 150),
        SectionBG = Color3.fromRGB(25, 25, 25),
        MainBG = Color3.fromRGB(20, 20, 20),
        TitleBarLine = Color3.fromRGB(50, 50, 50),
        TabUnselected = Color3.fromRGB(70, 70, 70),
        SectionBorder = Color3.fromRGB(35, 35, 35),
    },
    Darker = {
        Accent = Color3.fromRGB(80, 160, 230),
        ElementColor = Color3.fromRGB(40, 40, 40),
        ElementBorder = Color3.fromRGB(10, 10, 10),
        TextColor = Color3.fromRGB(210, 210, 210),
        SubTextColor = Color3.fromRGB(130, 130, 130),
        SectionBG = Color3.fromRGB(15, 15, 15),
        MainBG = Color3.fromRGB(10, 10, 10),
        TitleBarLine = Color3.fromRGB(40, 40, 40),
        TabUnselected = Color3.fromRGB(50, 50, 50),
        SectionBorder = Color3.fromRGB(25, 25, 25),
    },
    Light = {
        Accent = Color3.fromRGB(0, 120, 255),
        ElementColor = Color3.fromRGB(200, 200, 200),
        ElementBorder = Color3.fromRGB(180, 180, 180),
        TextColor = Color3.fromRGB(30, 30, 30),
        SubTextColor = Color3.fromRGB(80, 80, 80),
        SectionBG = Color3.fromRGB(240, 240, 240),
        MainBG = Color3.fromRGB(250, 250, 250),
        TitleBarLine = Color3.fromRGB(200, 200, 200),
        TabUnselected = Color3.fromRGB(160, 160, 160),
        SectionBorder = Color3.fromRGB(220, 220, 220),
    },
}

-- Utility functions
local function validateTheme(theme: Theme): boolean
    local requiredProperties = {
        "Accent", "ElementColor", "ElementBorder", "TextColor", 
        "SubTextColor", "SectionBG", "MainBG", "TitleBarLine", 
        "TabUnselected", "SectionBorder"
    }
    
    for _, property in ipairs(requiredProperties) do
        if not theme[property] or typeof(theme[property]) ~= "Color3" then
            return false
        end
    end
    
    return true
end

local function safeCallback(callback: any, ...: any): (boolean, any)
    if type(callback) ~= "function" then
        return false, "Callback must be a function"
    end
    
    local success, result = pcall(callback, ...)
    if not success then
        warn("BetterUI: Callback failed:", result)
    end
    
    return success, result
end

local function createTween(
    object: Instance, 
    properties: {[string]: any}, 
    duration: number?, 
    easingStyle: Enum.EasingStyle?, 
    easingDirection: Enum.EasingDirection?
): Tween
    duration = duration or ANIMATION_SPEED
    easingStyle = easingStyle or DEFAULT_EASING
    easingDirection = easingDirection or DEFAULT_EASING_DIRECTION
    
    local tweenInfo = TweenInfo.new(duration, easingStyle, easingDirection)
    return TweenService:Create(object, tweenInfo, properties)
end

local function registerThemeObject(object: Instance, property: string, themeProperty: string)
    table.insert(_themeObjects, {
        Object = object,
        Property = property,
        ThemeProperty = themeProperty
    })
end

local function serializeValue(value: any): any
    local valueType = typeof(value)
    
    if valueType == "Color3" then
        return {_type = "Color3", R = value.R, G = value.G, B = value.B}
    elseif valueType == "boolean" then
        return {_type = "boolean", value = value}
    elseif valueType == "number" then
        return {_type = "number", value = value}
    elseif valueType == "string" then
        return {_type = "string", value = value}
    elseif valueType == "Vector2" then
        return {_type = "Vector2", X = value.X, Y = value.Y}
    elseif valueType == "Vector3" then
        return {_type = "Vector3", X = value.X, Y = value.Y, Z = value.Z}
    end
    
    return value
end

local function deserializeValue(data: any): any
    if type(data) == "table" and data._type then
        if data._type == "Color3" then
            return Color3.new(data.R, data.G, data.B)
        elseif data._type == "boolean" then
            return data.value
        elseif data._type == "number" then
            return data.value
        elseif data._type == "string" then
            return data.value
        elseif data._type == "Vector2" then
            return Vector2.new(data.X, data.Y)
        elseif data._type == "Vector3" then
            return Vector3.new(data.X, data.Y, data.Z)
        end
    end
    
    return data
end

local function cleanupExistingUI()
    if _activeWindow then
        for _, connection in pairs(_cleanupConnections) do
            if connection and connection.Connected then
                connection:Disconnect()
            end
        end
        _cleanupConnections = {}
        
        if _activeWindow.ScreenGui and _activeWindow.ScreenGui.Parent then
            _activeWindow.ScreenGui:Destroy()
        end
        _activeWindow = nil
    end
end

-- Public API
function BetterUI.new(): BetterUI
    if _instance then
        warn("BetterUI: Instance already exists. Use BetterUI:GetInstance() to get the existing instance.")
        return _instance
    end
    
    local self = setmetatable({}, BetterUI)
    _instance = self
    
    self.Theme = "Default"
    self.Flags = _flags
    self.Configs = _configs
    self.Notifications = _notifications
    
    return self
end

function BetterUI:GetInstance(): BetterUI?
    return _instance
end

function BetterUI:SetTheme(themeName: string): boolean
    if not themeName or type(themeName) ~= "string" then
        warn("BetterUI: Invalid theme name provided")
        return false
    end
    
    if not THEMES[themeName] then
        warn("BetterUI: Theme '" .. themeName .. "' does not exist")
        return false
    end
    
    local theme = THEMES[themeName]
    if not validateTheme(theme) then
        warn("BetterUI: Invalid theme structure for '" .. themeName .. "'")
        return false
    end
    
    self.Theme = themeName
    
    for _, themeObject in ipairs(_themeObjects) do
        if themeObject.Object and themeObject.Object.Parent then
            local success, result = pcall(function()
                themeObject.Object[themeObject.Property] = theme[themeObject.ThemeProperty]
            end)
            
            if not success then
                warn("BetterUI: Failed to apply theme property:", result)
            end
        end
    end
    
    return true
end

function BetterUI:Destroy(): boolean
    local success, result = pcall(function()
        cleanupExistingUI()
        _instance = nil
        _themeObjects = {}
        _flags = {}
        _configs = {}
        _notifications = {}
    end)
    
    if not success then
        warn("BetterUI: Failed to destroy library:", result)
        return false
    end
    
    return true
end

function BetterUI:ShowNotification(config: NotificationConfig): boolean
    if not config or type(config) ~= "table" then
        warn("BetterUI: Invalid notification config")
        return false
    end
    
    if not config.Title or not config.Message then
        warn("BetterUI: Notification must have title and message")
        return false
    end
    
    local validTypes = {"success", "error", "warning", "info"}
    if not table.find(validTypes, config.Type) then
        warn("BetterUI: Invalid notification type")
        return false
    end
    
    local success, result = pcall(function()
        local notification = {
            Title = config.Title,
            Message = config.Message,
            Type = config.Type,
            Duration = config.Duration or 5,
            Timestamp = os.time()
        }
        
        table.insert(_notifications, notification)
        
        task.spawn(function()
            task.wait(notification.Duration)
            for i, notif in ipairs(_notifications) do
                if notif == notification then
                    table.remove(_notifications, i)
                    break
                end
            end
        end)
    end)
    
    if not success then
        warn("BetterUI: Failed to show notification:", result)
        return false
    end
    
    return true
end

function BetterUI:SaveConfig(configName: string): boolean
    if not configName or type(configName) ~= "string" then
        warn("BetterUI: Invalid config name")
        return false
    end
    
    local success, result = pcall(function()
        local serializedFlags = {}
        for key, value in pairs(_flags) do
            serializedFlags[key] = serializeValue(value)
        end
        
        local configData = {
            Flags = serializedFlags,
            Theme = self.Theme,
            Timestamp = os.time()
        }
        
        local jsonData = HttpService:JSONEncode(configData)
        _configs[configName] = jsonData
    end)
    
    if not success then
        warn("BetterUI: Failed to save config:", result)
        return false
    end
    
    return true
end

function BetterUI:LoadConfig(configName: string): boolean
    if not configName or type(configName) ~= "string" then
        warn("BetterUI: Invalid config name")
        return false
    end
    
    if not _configs[configName] then
        warn("BetterUI: Config '" .. configName .. "' does not exist")
        return false
    end
    
    local success, result = pcall(function()
        local configData = HttpService:JSONDecode(_configs[configName])
        
        if configData.Flags then
            for key, value in pairs(configData.Flags) do
                _flags[key] = deserializeValue(value)
            end
        end
        
        if configData.Theme then
            self:SetTheme(configData.Theme)
        end
    end)
    
    if not success then
        warn("BetterUI: Failed to load config:", result)
        return false
    end
    
    return true
end

function BetterUI:CreateWindow(config: WindowConfig): any
    if not config or type(config) ~= "table" then
        warn("BetterUI: Invalid window config")
        return nil
    end
    
    if not config.Title or not config.Size then
        warn("BetterUI: Window must have title and size")
        return nil
    end
    
    local success, result = pcall(function()
        cleanupExistingUI()
        
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "BetterUI_" .. config.Title
        screenGui.ResetOnSpawn = false
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        screenGui.Parent = CoreGui
        
        local mainFrame = Instance.new("Frame")
        mainFrame.Name = "MainFrame"
        mainFrame.Size = UDim2.new(0, config.Size.X, 0, config.Size.Y)
        mainFrame.Position = config.Position and UDim2.new(0, config.Position.X, 0, config.Position.Y) or UDim2.new(0.5, -config.Size.X/2, 0.5, -config.Size.Y/2)
        mainFrame.BackgroundColor3 = THEMES[self.Theme].MainBG
        mainFrame.BorderSizePixel = 0
        mainFrame.Parent = screenGui
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = mainFrame
        
        local titleBar = Instance.new("Frame")
        titleBar.Name = "TitleBar"
        titleBar.Size = UDim2.new(1, 0, 0, 40)
        titleBar.BackgroundColor3 = THEMES[self.Theme].ElementColor
        titleBar.BorderSizePixel = 0
        titleBar.Parent = mainFrame
        
        local titleBarCorner = Instance.new("UICorner")
        titleBarCorner.CornerRadius = UDim.new(0, 8)
        titleBarCorner.Parent = titleBar
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Name = "TitleLabel"
        titleLabel.Size = UDim2.new(1, -80, 1, 0)
        titleLabel.Position = UDim2.new(0, 10, 0, 0)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Text = config.Title
        titleLabel.TextColor3 = THEMES[self.Theme].TextColor
        titleLabel.TextScaled = true
        titleLabel.Font = Enum.Font.GothamBold
        titleLabel.Parent = titleBar
        
        registerThemeObject(titleLabel, "TextColor3", "TextColor")
        registerThemeObject(titleBar, "BackgroundColor3", "ElementColor")
        registerThemeObject(mainFrame, "BackgroundColor3", "MainBG")
        
        _activeWindow = {
            ScreenGui = screenGui,
            MainFrame = mainFrame,
            TitleBar = titleBar,
            Config = config
        }
        
        return _activeWindow
    end)
    
    if not success then
        warn("BetterUI: Failed to create window:", result)
        return nil
    end
    
    return result
end

-- Component creation methods
function BetterUI:CreateButton(config: any): any
    return Button.new(config)
end

function BetterUI:CreateToggle(config: any): any
    return Toggle.new(config)
end

function BetterUI:CreateSlider(config: any): any
    return Slider.new(config)
end

function BetterUI:CreateDropdown(config: any): any
    return Dropdown.new(config)
end

function BetterUI:CreateColorPicker(config: any): any
    return ColorPicker.new(config)
end

return BetterUI
