--[[
    Better UI library
    Created by Stacm/Stack
    Build 1.0.0
    Date: 2025-10-25
    Changelogs:
    - Nothing yet.
]]

if VYNIXUS_LOADED then
    for _, gui in pairs(CoreGui:GetChildren()) do
        if gui.Name == "BetterUI" or gui.Name == "BetterUILoading" or gui.Name == "Notifications" then
            gui:Destroy()
        end
    end
    if _G["Vynixus"] and _G["Vynixus"].ScreenGui and _G["Vynixus"].ScreenGui.Parent then
        _G["Vynixus"].ScreenGui:Destroy()
    end
    _G["Vynixus"] = nil
    VYNIXUS_LOADED = false
end

VYNIXUS_LOADED = true
if not game:IsLoaded() then game.Loaded:Wait() end

local Vynixus = {}
_G["Vynixus"] = Vynixus

Services = setmetatable({}, {
    __index = function(self, name)
        local success, cache = pcall(function()
            return game:GetService(name)
        end)
        if success then
            rawset(self, name, cache)
            return cache
        else
            error("Invalid Service: " .. tostring(name))
        end
    end
})

TweenService = Services.TweenService
UserInputService = Services.UserInputService
Players = Services.Players
RunService = Services.RunService
CoreGui = Services.CoreGui
HttpService = Services.HttpService
TeleportService = Services.TeleportService
TextService = Services.TextService

Player = Players.LocalPlayer
PlaceId = game.PlaceId

THEMES = {
    Default = {
        Accent = Color3.fromRGB(86, 195, 245),
        ElementColor = Color3.fromRGB(110, 110, 110),
        ElementBorder = Color3.fromRGB(25, 25, 25),
        TextColor = Color3.fromRGB(230, 230, 230),
        SubTextColor = Color3.fromRGB(160, 160, 160),
        SectionBG = Color3.fromRGB(35, 35, 35),
        MainBG = Color3.fromRGB(35, 35, 35),
        TitleBarLine = Color3.fromRGB(65, 65, 65),
        TabUnselected = Color3.fromRGB(90, 90, 90),
        SectionBorder = Color3.fromRGB(45, 45, 50),
    },
    Midnight = {
        Accent = Color3.fromRGB(120, 130, 255),
        ElementColor = Color3.fromRGB(85, 90, 110),
        ElementBorder = Color3.fromRGB(20, 25, 35),
        TextColor = Color3.fromRGB(220, 225, 240),
        SubTextColor = Color3.fromRGB(140, 145, 165),
        SectionBG = Color3.fromRGB(25, 30, 45),
        MainBG = Color3.fromRGB(18, 22, 35),
        TitleBarLine = Color3.fromRGB(50, 55, 75),
        TabUnselected = Color3.fromRGB(70, 75, 95),
        SectionBorder = Color3.fromRGB(40, 45, 65),
    },
    Aqua = {
        Accent = Color3.fromRGB(0, 255, 255),
        ElementColor = Color3.fromRGB(70, 115, 115),
        ElementBorder = Color3.fromRGB(15, 35, 35),
        TextColor = Color3.fromRGB(220, 245, 245),
        SubTextColor = Color3.fromRGB(140, 185, 185),
        SectionBG = Color3.fromRGB(20, 40, 45),
        MainBG = Color3.fromRGB(15, 30, 35),
        TitleBarLine = Color3.fromRGB(45, 75, 80),
        TabUnselected = Color3.fromRGB(60, 95, 100),
        SectionBorder = Color3.fromRGB(35, 65, 70),
    },
    Amethyst = {
        Accent = Color3.fromRGB(200, 120, 255),
        ElementColor = Color3.fromRGB(100, 85, 120),
        ElementBorder = Color3.fromRGB(30, 20, 40),
        TextColor = Color3.fromRGB(235, 220, 245),
        SubTextColor = Color3.fromRGB(175, 150, 190),
        SectionBG = Color3.fromRGB(35, 25, 50),
        MainBG = Color3.fromRGB(25, 18, 40),
        TitleBarLine = Color3.fromRGB(65, 50, 85),
        TabUnselected = Color3.fromRGB(80, 65, 100),
        SectionBorder = Color3.fromRGB(50, 40, 70),
    },
    Rose = {
        Accent = Color3.fromRGB(255, 100, 150),
        ElementColor = Color3.fromRGB(120, 85, 100),
        ElementBorder = Color3.fromRGB(40, 20, 30),
        TextColor = Color3.fromRGB(245, 220, 230),
        SubTextColor = Color3.fromRGB(190, 150, 170),
        SectionBG = Color3.fromRGB(45, 25, 35),
        MainBG = Color3.fromRGB(35, 18, 28),
        TitleBarLine = Color3.fromRGB(80, 50, 65),
        TabUnselected = Color3.fromRGB(100, 65, 80),
        SectionBorder = Color3.fromRGB(65, 40, 55),
    },
    Dark = {
        Accent = Color3.fromRGB(100, 180, 255),
        ElementColor = Color3.fromRGB(60, 60, 60),
        ElementBorder = Color3.fromRGB(15, 15, 15),
        TextColor = Color3.fromRGB(220, 220, 220),
        SubTextColor = Color3.fromRGB(150, 150, 150),
        SectionBG = Color3.fromRGB(25, 25, 25),
        MainBG = Color3.fromRGB(20, 20, 20),
        TitleBarLine = Color3.fromRGB(50, 50, 50),
        TabUnselected = Color3.fromRGB(70, 70, 70),
        SectionBorder = Color3.fromRGB(35, 35, 35),
    },
    Darker = {
        Accent = Color3.fromRGB(80, 160, 230),
        ElementColor = Color3.fromRGB(40, 40, 40),
        ElementBorder = Color3.fromRGB(10, 10, 10),
        TextColor = Color3.fromRGB(210, 210, 210),
        SubTextColor = Color3.fromRGB(130, 130, 130),
        SectionBG = Color3.fromRGB(15, 15, 15),
        MainBG = Color3.fromRGB(10, 10, 10),
        TitleBarLine = Color3.fromRGB(35, 35, 35),
        TabUnselected = Color3.fromRGB(50, 50, 50),
        SectionBorder = Color3.fromRGB(25, 25, 25),
    },
    Light = {
        Accent = Color3.fromRGB(50, 150, 255),
        ElementColor = Color3.fromRGB(220, 220, 220),
        ElementBorder = Color3.fromRGB(180, 180, 180),
        TextColor = Color3.fromRGB(30, 30, 30),
        SubTextColor = Color3.fromRGB(90, 90, 90),
        SectionBG = Color3.fromRGB(245, 245, 245),
        MainBG = Color3.fromRGB(250, 250, 250),
        TitleBarLine = Color3.fromRGB(200, 200, 200),
        TabUnselected = Color3.fromRGB(210, 210, 210),
        SectionBorder = Color3.fromRGB(190, 190, 190),
    },
    Ocean = {
        Accent = Color3.fromRGB(30, 180, 255),
        ElementColor = Color3.fromRGB(70, 100, 130),
        ElementBorder = Color3.fromRGB(20, 40, 60),
        TextColor = Color3.fromRGB(220, 235, 245),
        SubTextColor = Color3.fromRGB(150, 175, 195),
        SectionBG = Color3.fromRGB(25, 45, 65),
        MainBG = Color3.fromRGB(18, 35, 52),
        TitleBarLine = Color3.fromRGB(50, 70, 95),
        TabUnselected = Color3.fromRGB(65, 85, 110),
        SectionBorder = Color3.fromRGB(40, 60, 85),
    },
    Forest = {
        Accent = Color3.fromRGB(100, 220, 120),
        ElementColor = Color3.fromRGB(70, 100, 75),
        ElementBorder = Color3.fromRGB(20, 35, 25),
        TextColor = Color3.fromRGB(220, 240, 225),
        SubTextColor = Color3.fromRGB(150, 180, 155),
        SectionBG = Color3.fromRGB(25, 40, 30),
        MainBG = Color3.fromRGB(18, 30, 22),
        TitleBarLine = Color3.fromRGB(50, 70, 55),
        TabUnselected = Color3.fromRGB(65, 90, 70),
        SectionBorder = Color3.fromRGB(40, 60, 45),
    },
    Sunset = {
        Accent = Color3.fromRGB(255, 150, 80),
        ElementColor = Color3.fromRGB(120, 90, 80),
        ElementBorder = Color3.fromRGB(40, 25, 20),
        TextColor = Color3.fromRGB(245, 230, 220),
        SubTextColor = Color3.fromRGB(190, 160, 150),
        SectionBG = Color3.fromRGB(50, 35, 30),
        MainBG = Color3.fromRGB(40, 28, 23),
        TitleBarLine = Color3.fromRGB(80, 60, 50),
        TabUnselected = Color3.fromRGB(100, 75, 65),
        SectionBorder = Color3.fromRGB(65, 50, 45),
    },
    Cherry = {
        Accent = Color3.fromRGB(255, 80, 120),
        ElementColor = Color3.fromRGB(110, 75, 85),
        ElementBorder = Color3.fromRGB(35, 20, 25),
        TextColor = Color3.fromRGB(245, 220, 230),
        SubTextColor = Color3.fromRGB(185, 150, 165),
        SectionBG = Color3.fromRGB(40, 25, 30),
        MainBG = Color3.fromRGB(30, 18, 23),
        TitleBarLine = Color3.fromRGB(70, 50, 60),
        TabUnselected = Color3.fromRGB(90, 65, 75),
        SectionBorder = Color3.fromRGB(60, 40, 50),
    },
    Grape = {
        Accent = Color3.fromRGB(180, 100, 255),
        ElementColor = Color3.fromRGB(95, 75, 115),
        ElementBorder = Color3.fromRGB(30, 20, 40),
        TextColor = Color3.fromRGB(235, 220, 245),
        SubTextColor = Color3.fromRGB(170, 145, 190),
        SectionBG = Color3.fromRGB(35, 25, 50),
        MainBG = Color3.fromRGB(25, 18, 38),
        TitleBarLine = Color3.fromRGB(65, 50, 80),
        TabUnselected = Color3.fromRGB(80, 60, 95),
        SectionBorder = Color3.fromRGB(55, 40, 70),
    },
    Crimson = {
        Accent = Color3.fromRGB(220, 50, 80),
        ElementColor = Color3.fromRGB(100, 65, 75),
        ElementBorder = Color3.fromRGB(30, 15, 20),
        TextColor = Color3.fromRGB(240, 215, 220),
        SubTextColor = Color3.fromRGB(180, 140, 150),
        SectionBG = Color3.fromRGB(40, 20, 28),
        MainBG = Color3.fromRGB(30, 15, 20),
        TitleBarLine = Color3.fromRGB(70, 45, 55),
        TabUnselected = Color3.fromRGB(85, 55, 65),
        SectionBorder = Color3.fromRGB(60, 35, 45),
    },
    Emerald = {
        Accent = Color3.fromRGB(80, 255, 150),
        ElementColor = Color3.fromRGB(65, 105, 85),
        ElementBorder = Color3.fromRGB(18, 35, 25),
        TextColor = Color3.fromRGB(215, 245, 230),
        SubTextColor = Color3.fromRGB(145, 185, 165),
        SectionBG = Color3.fromRGB(22, 42, 32),
        MainBG = Color3.fromRGB(15, 32, 23),
        TitleBarLine = Color3.fromRGB(45, 75, 60),
        TabUnselected = Color3.fromRGB(60, 95, 75),
        SectionBorder = Color3.fromRGB(35, 65, 50),
    },
    Gold = {
        Accent = Color3.fromRGB(255, 200, 50),
        ElementColor = Color3.fromRGB(115, 100, 70),
        ElementBorder = Color3.fromRGB(35, 30, 18),
        TextColor = Color3.fromRGB(245, 235, 210),
        SubTextColor = Color3.fromRGB(185, 170, 140),
        SectionBG = Color3.fromRGB(45, 40, 25),
        MainBG = Color3.fromRGB(35, 30, 18),
        TitleBarLine = Color3.fromRGB(75, 65, 45),
        TabUnselected = Color3.fromRGB(95, 85, 60),
        SectionBorder = Color3.fromRGB(65, 55, 35),
    }
}

currentTheme = "Default"
flags = {}
configs = {}
notifications = {}
activeWindow = nil
cleanupConnections = {}
themeObjects = {}

-- Helper Functions
function getCurrentTheme()
    return THEMES[currentTheme] or THEMES.Default
end

function createTween(object, properties, duration, easingStyle, easingDirection)
    duration = duration or 0.2
    easingStyle = easingStyle or Enum.EasingStyle.Exponential
    easingDirection = easingDirection or Enum.EasingDirection.Out
    
    local tweenInfo = TweenInfo.new(duration, easingStyle, easingDirection)
    return TweenService:Create(object, tweenInfo, properties)
end

function tweenProperty(object, property, value, duration, easingStyle, easingDirection)
    local tween = createTween(object, {[property] = value}, duration, easingStyle, easingDirection)
    tween:Play()
    return tween
end

function createCorner(parent, radius)
    local corner = Instance.new("UICorner", parent)
    corner.CornerRadius = UDim.new(0, radius or 4)
    return corner
end

function createStroke(parent, color, transparency, thickness)
    local stroke = Instance.new("UIStroke", parent)
    stroke.Color = color or getCurrentTheme().ElementBorder
    stroke.Transparency = transparency or 0.5
    stroke.Thickness = thickness or 1
    return stroke
end

function createFrame(parent, size, position, backgroundColor, transparency, name)
    local frame = Instance.new("Frame", parent)
    frame.Size = size or UDim2.new(1, 0, 1, 0)
    frame.Position = position or UDim2.new(0, 0, 0, 0)
    frame.BackgroundColor3 = backgroundColor or getCurrentTheme().ElementColor
    frame.BackgroundTransparency = transparency or 0.87
    frame.BorderSizePixel = 0
    frame.Name = name or "Frame"
    return frame
end

function createTextLabel(parent, text, size, position, font, textSize, textColor, textXAlignment, textYAlignment)
    local label = Instance.new("TextLabel", parent)
    label.Text = text or ""
    label.Size = size or UDim2.new(1, 0, 0, 20)
    label.Position = position or UDim2.new(0, 0, 0, 0)
    label.Font = font or Enum.Font.Gotham
    label.TextSize = textSize or 14
    label.TextColor3 = textColor or getCurrentTheme().TextColor
    label.TextXAlignment = textXAlignment or Enum.TextXAlignment.Left
    label.TextYAlignment = textYAlignment or Enum.TextYAlignment.Center
    label.BackgroundTransparency = 1
    return label
end

function createTextButton(parent, text, size, position, font, textSize, textColor, backgroundColor, transparency)
    local button = Instance.new("TextButton", parent)
    button.Text = text or ""
    button.Size = size or UDim2.new(1, 0, 0, 30)
    button.Position = position or UDim2.new(0, 0, 0, 0)
    button.Font = font or Enum.Font.Gotham
    button.TextSize = textSize or 14
    button.TextColor3 = textColor or getCurrentTheme().TextColor
    button.BackgroundColor3 = backgroundColor or getCurrentTheme().ElementColor
    button.BackgroundTransparency = transparency or 0.87
    button.BorderSizePixel = 0
    button.AutoButtonColor = false
    return button
end

function createTextBox(parent, text, size, position, font, textSize, textColor, backgroundColor, transparency)
    local textBox = Instance.new("TextBox", parent)
    textBox.Text = text or ""
    textBox.Size = size or UDim2.new(1, 0, 0, 20)
    textBox.Position = position or UDim2.new(0, 0, 0, 0)
    textBox.Font = font or Enum.Font.Gotham
    textBox.TextSize = textSize or 14
    textBox.TextColor3 = textColor or getCurrentTheme().TextColor
    textBox.BackgroundColor3 = backgroundColor or getCurrentTheme().ElementColor
    textBox.BackgroundTransparency = transparency or 0.87
    textBox.BorderSizePixel = 0
    textBox.ClearTextOnFocus = false
    return textBox
end

function createScrollingFrame(parent, size, position, backgroundColor, transparency)
    local scrollFrame = Instance.new("ScrollingFrame", parent)
    scrollFrame.Size = size or UDim2.new(1, 0, 1, 0)
    scrollFrame.Position = position or UDim2.new(0, 0, 0, 0)
    scrollFrame.BackgroundColor3 = backgroundColor or getCurrentTheme().ElementColor
    scrollFrame.BackgroundTransparency = transparency or 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 3
    scrollFrame.CanvasSize = UDim2.fromScale(0, 0)
    scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    return scrollFrame
end

function createImageLabel(parent, image, size, position, imageColor, transparency)
    local imageLabel = Instance.new("ImageLabel", parent)
    imageLabel.Image = image or ""
    imageLabel.Size = size or UDim2.new(0, 20, 0, 20)
    imageLabel.Position = position or UDim2.new(0, 0, 0, 0)
    imageLabel.ImageColor3 = imageColor or Color3.new(1, 1, 1)
    imageLabel.ImageTransparency = transparency or 0
    imageLabel.BackgroundTransparency = 1
    return imageLabel
end

function createListLayout(parent, padding, sortOrder, verticalAlignment, horizontalAlignment)
    local listLayout = Instance.new("UIListLayout", parent)
    listLayout.Padding = UDim.new(0, padding or 5)
    listLayout.SortOrder = sortOrder or Enum.SortOrder.LayoutOrder
    listLayout.VerticalAlignment = verticalAlignment or Enum.VerticalAlignment.Top
    listLayout.HorizontalAlignment = horizontalAlignment or Enum.HorizontalAlignment.Left
    return listLayout
end

function createPadding(parent, top, bottom, left, right)
    local padding = Instance.new("UIPadding", parent)
    padding.PaddingTop = UDim.new(0, top or 0)
    padding.PaddingBottom = UDim.new(0, bottom or 0)
    padding.PaddingLeft = UDim.new(0, left or 0)
    padding.PaddingRight = UDim.new(0, right or 0)
    return padding
end

function createSizeConstraint(parent, minSize, maxSize)
    local constraint = Instance.new("UISizeConstraint", parent)
    if minSize then constraint.MinSize = minSize end
    if maxSize then constraint.MaxSize = maxSize end
    return constraint
end

function applyHoverEffects(element, hoverTransparency, normalTransparency, pressTransparency)
    hoverTransparency = hoverTransparency or 0.8
    normalTransparency = normalTransparency or 0.87
    pressTransparency = pressTransparency or 0.94
    
    element.MouseEnter:Connect(function()
        tweenProperty(element, "BackgroundTransparency", hoverTransparency, 0.15)
    end)
    
    element.MouseLeave:Connect(function()
        tweenProperty(element, "BackgroundTransparency", normalTransparency, 0.15)
    end)
    
    element.MouseButton1Down:Connect(function()
        tweenProperty(element, "BackgroundTransparency", pressTransparency, 0.1)
    end)
    
    element.MouseButton1Up:Connect(function()
        tweenProperty(element, "BackgroundTransparency", hoverTransparency, 0.1)
    end)
end

function registerThemeObject(object, property, themeProperty)
    table.insert(themeObjects, {
        Object = object,
        Property = property,
        ThemeProperty = themeProperty
    })
end

function applyThemeToObject(object, property, themeProperty)
    local currentThemeData = getCurrentTheme()
    local value = currentThemeData[themeProperty]
    
    if property == "BackgroundColor3" then
        object.BackgroundColor3 = value
    elseif property == "TextColor3" then
        object.TextColor3 = value
    elseif property == "Color" then
        object.Color = value
    elseif property == "ImageColor3" then
        object.ImageColor3 = value
    end
end

function createStyledEl(elementType, parent, properties)
    local element = elementType == "Frame" and createFrame(parent, properties.size, properties.position, properties.backgroundColor, properties.transparency, properties.name)
        or elementType == "TextLabel" and createTextLabel(parent, properties.text, properties.size, properties.position, properties.font, properties.textSize, properties.textColor, properties.textXAlignment, properties.textYAlignment)
        or elementType == "TextButton" and createTextButton(parent, properties.text, properties.size, properties.position, properties.font, properties.textSize, properties.textColor, properties.backgroundColor, properties.transparency)
        or elementType == "TextBox" and createTextBox(parent, properties.text, properties.size, properties.position, properties.font, properties.textSize, properties.textColor, properties.backgroundColor, properties.transparency)
        or elementType == "ScrollingFrame" and createScrollingFrame(parent, properties.size, properties.position, properties.backgroundColor, properties.transparency)
        or elementType == "ImageLabel" and createImageLabel(parent, properties.image, properties.size, properties.position, properties.imageColor, properties.transparency)
    
    if properties.cornerRadius then
        createCorner(element, properties.cornerRadius)
    end
    
    if properties.stroke then
        createStroke(element, properties.stroke.color, properties.stroke.transparency, properties.stroke.thickness)
    end
    
    if properties.theme then
        registerThemeObject(element, properties.theme.property, properties.theme.themeProperty)
    end
    
    if properties.hoverEffects then
        applyHoverEffects(element, properties.hoverEffects.hover, properties.hoverEffects.normal, properties.hoverEffects.press)
    end
    
    return element
end

function cleanupExistingUI()
    if activeWindow then
        for _, connection in pairs(cleanupConnections) do
            if connection and connection.Connected then
                connection:Disconnect()
            end
        end
        cleanupConnections = {}
        
        if activeWindow.ScreenGui and activeWindow.ScreenGui.Parent then
            activeWindow.ScreenGui:Destroy()
        end
        
        activeWindow = nil
        flags = {}
        themeObjects = {}
        
        task.wait(0.1)
    end
    
    for _, gui in pairs(CoreGui:GetChildren()) do
        if gui.Name == "BetterUI" or gui.Name == "BetterUILoading" then
            gui:Destroy()
        end
    end
end

function SetTheme(themeName)
    if not THEMES[themeName] then
        return false
    end
    
    currentTheme = themeName
    local currentThemeData = getCurrentTheme()
    
    for _, themeObj in pairs(themeObjects) do
        if themeObj.Object and themeObj.Object.Parent then
            applyThemeToObject(themeObj.Object, themeObj.Property, themeObj.ThemeProperty)
        end
    end
    
    return true
end

local notificationsScreenGui = Instance.new("ScreenGui")
notificationsScreenGui.Name = "Notifications"
notificationsScreenGui.Parent = CoreGui
notificationsScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
notificationsScreenGui.ResetOnSpawn = false

local BlurredGui = nil
if not _G.AcrylicBlurLoaded then
    BlurredGui = loadstring(game:HttpGet("https://raw.githubusercontent.com/Number2189/UI/refs/heads/main/AcrylicBlur"))()
    _G.AcrylicBlurLoaded = true
end

local notificationCount = 0
local acylicInstances = {}

Vynixus.ShowNotification = function(title, message, notificationType)
    if #notifications >= 4 then
        for _, notif in ipairs(notifications) do
            if notif and notif.Parent then
                notif:Destroy()
            end
        end
        for _, instance in ipairs(acylicInstances) do
            if instance.Instance then
                instance.Instance:Destroy()
            end
        end
        notifications = {}
        acylicInstances = {}
    end
    notificationCount = notificationCount + 1
    if notificationCount > 4 then
        notificationCount = 1
    end

    local NotificationGui = notificationsScreenGui

    local frame = Instance.new("Frame")
    frame.Name = "notificationFrame_" .. tostring(tick())
    frame.Parent = NotificationGui
    frame.AnchorPoint = Vector2.new(1, 0)
    frame.Position = UDim2.new(1, -250, 0, 24)
    frame.Size = UDim2.new(0, 214, 0, 60)
    frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    frame.BackgroundTransparency = 0.2
    frame.BorderColor3 = Color3.new(0, 0, 0)
    frame.BorderSizePixel = 0
    frame.ZIndex = 202

    if BlurredGui then
        local acrylicBlurInstance = BlurredGui.new(frame, "Rectangle")
        acrylicBlurInstance:SetIntensity(0.5)
        table.insert(acylicInstances, {
            Instance = acrylicBlurInstance,
            Index = notificationCount
        })
    end

    local corner = Instance.new("UICorner")
    corner.Parent = frame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "titleLabel"
    titleLabel.Parent = frame
    titleLabel.BackgroundColor3 = Color3.new(1, 1, 1)
    titleLabel.BackgroundTransparency = 1
    titleLabel.BorderColor3 = Color3.new(0, 0, 0)
    titleLabel.BorderSizePixel = 0
    titleLabel.Position = UDim2.new(0, 15, 0, 11)
    titleLabel.Size = UDim2.new(1, -60, 0, 16)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Text = tostring(title) or "Title"
    titleLabel.TextColor3 = Color3.new(1, 1, 1)
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.ZIndex = 203

    local descriptionLabel = Instance.new("TextLabel")
    descriptionLabel.Name = "descriptionLabel"
    descriptionLabel.Parent = frame
    descriptionLabel.BackgroundColor3 = Color3.new(1, 1, 1)
    descriptionLabel.BackgroundTransparency = 1
    descriptionLabel.BorderColor3 = Color3.new(0, 0, 0)
    descriptionLabel.BorderSizePixel = 0
    descriptionLabel.Position = UDim2.new(0, 15, 0, 33)
    descriptionLabel.Size = UDim2.new(1, -60, 0, 16)
    descriptionLabel.Font = Enum.Font.Gotham
    descriptionLabel.Text = tostring(message) or "Description"
    descriptionLabel.TextColor3 = Color3.new(1, 1, 1)
    descriptionLabel.TextSize = 14
    descriptionLabel.TextXAlignment = Enum.TextXAlignment.Left
    descriptionLabel.ZIndex = 203

    table.insert(notifications, frame)
    local function rearrangeNotifications()
        local offsetY = 24
        for _, notif in ipairs(notifications) do
            if notif and notif.Parent then
                notif.Position = UDim2.new(1, -250, 0, offsetY)
                offsetY = offsetY + notif.Size.Y.Offset + 10
            end
        end
    end
    rearrangeNotifications()

    local function removeNotification()
        for i, notif in ipairs(notifications) do
            if notif == frame then
                table.remove(notifications, i)
                break
            end
        end
        for i, instance in ipairs(acylicInstances) do
            if instance.Index == notificationCount then
                instance.Instance:Destroy()
                table.remove(acylicInstances, i)
                break
            end
        end
        notificationCount = notificationCount - 1
        frame:Destroy()
        rearrangeNotifications()
    end

    task.spawn(function()
        task.wait(4)
        if frame and frame.Parent then
            removeNotification()
        end
    end)
end

function SaveConfig(configName)
    if not configName or configName == "" then
        return false
    end
    
    local success, result = pcall(function()
        local configData = {}
        for flagName, flagData in pairs(flags) do
            configData[flagName] = flagData.value
        end
        
        local configJson = HttpService:JSONEncode(configData)
        local configPath = "BetterUI_Config_" .. PlaceId .. "_" .. configName .. ".json"
        writefile(configPath, configJson)
    end)
    
    if not success then
        return false
    end
    return true
end

function LoadConfig(configName)
    if not configName or configName == "" then
        return false
    end
    
    local success, result = pcall(function()
        local configPath = "BetterUI_Config_" .. PlaceId .. "_" .. configName .. ".json"
        if isfile(configPath) then
            local configJson = readfile(configPath)
            local configData = HttpService:JSONDecode(configJson)
            
            for flagName, value in pairs(configData) do
                if flags[flagName] then
                    flags[flagName]:SetValue(value)
                end
            end
        else
            return false
        end
    end)
    
    if not success then
        return false
    end
    return true
end

Vynixus.CreateWindow = function(config)
    if not config or type(config) ~= "table" then
        return nil
    end
    
    cleanupExistingUI()
    
    local window = {}
    window.tabs = {}
    window.containers = {}
    window.currentTab = nil
    window.tabCount = 0
    window.selectedTab = 0
    window.searchEnabled = config.SearchEnabled or false
    window.searchElements = {}
    
    if config.Theme then
        SetTheme(config.Theme)
    end
    
    local screenGui = Instance.new("ScreenGui", CoreGui)
    screenGui.Name = "BetterUI"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.ResetOnSpawn = false
    
    window.ScreenGui = screenGui
    
    local currentThemeData = getCurrentTheme()
    local windowSize = config.Size or UDim2.fromOffset(580, 460)
    
    local mainFrame = createStyledEl("Frame", screenGui, {
        size = windowSize,
        position = UDim2.new(0.5, -(windowSize.X.Offset/2), 0.5, -(windowSize.Y.Offset/2)),
        backgroundColor = currentThemeData.MainBG,
        transparency = 0,
        cornerRadius = 6,
        stroke = {
            color = currentThemeData.ElementBorder,
            transparency = 0.8,
            thickness = 1
        },
        theme = {
            property = "BackgroundColor3",
            themeProperty = "MainBG"
        }
    })
    mainFrame.Active = true
    mainFrame.Visible = false
    
    local titleBarFrame = createStyledEl("Frame", mainFrame, {
        size = UDim2.new(1, 0, 0, 42),
        transparency = 1
    })
    
    local dragging, dragInput, mousePos, startPos = false
    
    local function handleDrag(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            startPos = mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end
    
    local function handleDragMove(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end
    
    titleBarFrame.InputBegan:Connect(handleDrag)
    titleBarFrame.InputChanged:Connect(handleDragMove)
    
    local dragConnection = UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            local targetPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            tweenProperty(mainFrame, "Position", targetPos, 0.1, Enum.EasingStyle.Quad)
        end
    end)
    
    table.insert(cleanupConnections, dragConnection)
    
    local titleHolder = createStyledEl("Frame", titleBarFrame, {
        size = UDim2.new(1, -16, 1, 0),
        position = UDim2.fromOffset(16, 0),
        transparency = 1
    })
    
    local titleLabel = createStyledEl("TextLabel", titleHolder, {
        text = config.Title or "BetterUI",
        size = UDim2.fromScale(1, 1),
        font = Enum.Font.Gotham,
        textSize = 15,
        textColor = currentThemeData.TextColor,
        textXAlignment = Enum.TextXAlignment.Left,
        textYAlignment = Enum.TextYAlignment.Center,
        theme = {
            property = "TextColor3",
            themeProperty = "TextColor"
        }
    })
    
    local titleBarLine = createStyledEl("Frame", titleBarFrame, {
        size = UDim2.new(1, 0, 0, 1),
        position = UDim2.new(0, 0, 1, 0),
        backgroundColor = currentThemeData.TitleBarLine,
        transparency = 0.5,
        theme = {
            property = "BackgroundColor3",
            themeProperty = "TitleBarLine"
        }
    })
    
    local tabWidth = config.TabWidth or 160
    
    local tabContainer = createStyledEl("Frame", mainFrame, {
        size = UDim2.new(0, tabWidth, 1, -66),
        position = UDim2.fromOffset(12, 54),
        transparency = 1
    })
    tabContainer.ClipsDescendants = true
    
    local tabScroll = createStyledEl("ScrollingFrame", tabContainer, {
        size = UDim2.fromScale(1, 1),
        transparency = 1
    })
    tabScroll.ScrollBarThickness = 0
    tabScroll.ScrollBarImageTransparency = 1
    tabScroll.CanvasSize = UDim2.fromScale(0, 0)
    tabScroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
    
    createListLayout(tabScroll, 4, Enum.SortOrder.LayoutOrder)
    
    local containerCanvas = createStyledEl("Frame", mainFrame, {
        size = UDim2.new(1, -tabWidth - 32, 1, -66),
        position = UDim2.fromOffset(tabWidth + 26, 54),
        transparency = 1
    })
    
    local containerHolder = createStyledEl("Frame", containerCanvas, {
        size = UDim2.fromScale(1, 1),
        transparency = 1
    })
    
    window.TabScroll = tabScroll
    window.ContainerHolder = containerHolder
    
    function window:ToggleVisibility()
        local isVisible = mainFrame.Visible
        mainFrame.Visible = not isVisible
        
        if not isVisible then
            tweenProperty(mainFrame, "Size", windowSize, 0.3)
        end
    end
    
    function window:CreateTab(name, icon)
        if not name or name == "" then
            return nil
        end
        
        local tab = {}
        window.tabCount = window.tabCount + 1
        local tabIndex = window.tabCount
        
        local tabButton = createStyledEl("TextButton", tabScroll, {
            size = UDim2.new(1, 0, 0, 34),
            backgroundColor = currentThemeData.TabUnselected,
            transparency = 1,
            cornerRadius = 6,
            hoverEffects = {
                hover = 0.89,
                normal = 1,
                press = 0.92
            },
            theme = {
                property = "BackgroundColor3",
                themeProperty = "TabUnselected"
            }
        })
        tabButton.LayoutOrder = tabIndex
        
        local tabLabel = createStyledEl("TextLabel", tabButton, {
            text = name,
            size = UDim2.new(1, -12, 1, 0),
            position = UDim2.fromOffset(12, 0),
            font = Enum.Font.GothamMedium,
            textSize = 15,
            textColor = Color3.fromRGB(135, 135, 140),
            textXAlignment = Enum.TextXAlignment.Left
        })
        
        if icon then
            local tabIcon = createStyledEl("ImageLabel", tabButton, {
                image = typeof(icon) == "string" and (string.find(icon, "rbxassetid://") and icon or "rbxassetid://" .. icon) or "rbxassetid://" .. tostring(icon),
                size = UDim2.fromOffset(16, 16),
                position = UDim2.fromOffset(8, 9),
                imageColor = Color3.fromRGB(135, 135, 140),
                transparency = 0.3
            })
            
            tabLabel.Position = UDim2.fromOffset(32, 0)
            tabLabel.Size = UDim2.new(1, -44, 1, 0)
        end
        
        local tabContent = createStyledEl("ScrollingFrame", containerHolder, {
            size = UDim2.fromScale(1, 1),
            transparency = 1
        })
        tabContent.ScrollBarThickness = 3
        tabContent.BottomImage = "rbxassetid://6889812791"
        tabContent.MidImage = "rbxassetid://6889812721"
        tabContent.TopImage = "rbxassetid://6276641225"
        tabContent.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
        tabContent.ScrollBarImageTransparency = 0.95
        tabContent.CanvasSize = UDim2.fromScale(0, 0)
        tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        tabContent.Visible = false
        
        createListLayout(tabContent, 5, Enum.SortOrder.LayoutOrder)
        createPadding(tabContent, 1, 1, 1, 10)
        
        tab.Frame = tabButton
        tab.Label = tabLabel
        tab.Content = tabContent
        tab.Selected = false
        
        local function setTransparency(value)
            tweenProperty(tabButton, "BackgroundTransparency", value, 0.2, Enum.EasingStyle.Quad)
        end
        
        tabButton.MouseEnter:Connect(function()
            setTransparency(tab.Selected and 0.85 or 0.89)
        end)
        
        tabButton.MouseLeave:Connect(function()
            setTransparency(tab.Selected and 0.89 or 1)
        end)
        
        tabButton.MouseButton1Down:Connect(function()
            setTransparency(0.92)
        end)
        
        tabButton.MouseButton1Up:Connect(function()
            setTransparency(tab.Selected and 0.85 or 0.89)
        end)
        
        tabButton.MouseButton1Click:Connect(function()
            window:SelectTab(tabIndex)
        end)
        
        window.containers[tabIndex] = tabContent
        window.tabs[tabIndex] = tab
        
        if not window.currentTab then
            window.currentTab = tab
            window.selectedTab = tabIndex
            tabContent.Visible = true
            tab.Selected = true
            tabButton.BackgroundTransparency = 0.89
            tabLabel.TextColor3 = Color3.fromRGB(245, 245, 250)
        end
        
        function tab:AddSection(title)
            if not title or title == "" then
                return nil
            end
            
            local section = setmetatable({}, {__index = tab})
            
            local sectionRoot = createStyledEl("Frame", tabContent, {
                size = UDim2.new(1, 0, 0, 22),
                transparency = 1
            })
            sectionRoot.LayoutOrder = 7
            
            local sectionTitle = createStyledEl("TextLabel", sectionRoot, {
                text = title,
                size = UDim2.new(1, -16, 0, 16),
                position = UDim2.fromOffset(0, 2),
                font = Enum.Font.GothamBold,
                textSize = 16,
                textColor = currentThemeData.TextColor,
                textXAlignment = Enum.TextXAlignment.Left,
                textYAlignment = Enum.TextYAlignment.Center,
                theme = {
                    property = "TextColor3",
                    themeProperty = "TextColor"
                }
            })
            
            local sectionContainer = createStyledEl("Frame", sectionRoot, {
                size = UDim2.new(1, 0, 0, 0),
                position = UDim2.fromOffset(0, 22),
                backgroundColor = currentThemeData.SectionBG,
                transparency = 0.3,
                cornerRadius = 8,
                stroke = {
                    color = currentThemeData.SectionBorder,
                    transparency = 0.6
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "SectionBG"
                }
            })
            
            createListLayout(sectionContainer, 5, Enum.SortOrder.LayoutOrder)
            createPadding(sectionContainer, 8, 8, 8, 8)
            
            sectionContainer.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                sectionContainer.Size = UDim2.new(1, 0, 0, sectionContainer.UIListLayout.AbsoluteContentSize.Y + 16)
                sectionRoot.Size = UDim2.new(1, 0, 0, sectionContainer.UIListLayout.AbsoluteContentSize.Y + 38)
            end)
            
            section.Container = sectionContainer
            section.Content = sectionContainer
            
            return section
        end
        
        function tab:AddToggle(text, desc, default, callback, flag)
            if not text or text == "" then
                return nil
            end
            
            local toggle = {}
            local toggled = default or false
            local container = tab.Content
            
            local toggleFrame = createStyledEl("TextButton", container, {
                size = UDim2.new(1, 0, 0, 0),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 0.87,
                cornerRadius = 4,
                stroke = {
                    color = currentThemeData.ElementBorder,
                    transparency = 0.5
                },
                hoverEffects = {
                    hover = 0.8,
                    normal = 0.87,
                    press = 0.94
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            toggleFrame.AutomaticSize = Enum.AutomaticSize.Y
            toggleFrame.LayoutOrder = 7
            
            local labelHolder = createStyledEl("Frame", toggleFrame, {
                size = UDim2.new(1, -64, 0, 0),
                position = UDim2.fromOffset(10, 0),
                transparency = 1
            })
            labelHolder.AutomaticSize = Enum.AutomaticSize.Y
            
            createListLayout(labelHolder, 0, Enum.SortOrder.LayoutOrder, Enum.VerticalAlignment.Center)
            createPadding(labelHolder, 13, 13, 0, 0)
            
            local titleLabel = createStyledEl("TextLabel", labelHolder, {
                text = text,
                size = UDim2.new(1, 0, 0, 14),
                font = Enum.Font.GothamMedium,
                textSize = 13,
                textColor = currentThemeData.TextColor,
                textXAlignment = Enum.TextXAlignment.Left,
                theme = {
                    property = "TextColor3",
                    themeProperty = "TextColor"
                }
            })
            
            if desc then
                local descLabel = createStyledEl("TextLabel", labelHolder, {
                    text = desc,
                    size = UDim2.new(1, -54, 0, 14),
                    font = Enum.Font.Gotham,
                    textSize = 12,
                    textColor = currentThemeData.SubTextColor,
                    textXAlignment = Enum.TextXAlignment.Left,
                    theme = {
                        property = "TextColor3",
                        themeProperty = "SubTextColor"
                    }
                })
                descLabel.TextWrapped = true
                descLabel.AutomaticSize = Enum.AutomaticSize.Y
            end
            
            local toggleSlider = createStyledEl("Frame", toggleFrame, {
                size = UDim2.fromOffset(36, 18),
                position = UDim2.new(1, -10, 0.5, 0),
                backgroundColor = currentThemeData.Accent,
                transparency = 1,
                cornerRadius = 9,
                stroke = {
                    color = currentThemeData.ElementColor,
                    transparency = 0.5
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "Accent"
                }
            })
            toggleSlider.AnchorPoint = Vector2.new(1, 0.5)
            
            local toggleCircle = createStyledEl("ImageLabel", toggleSlider, {
                image = "rbxassetid://12266946128",
                size = UDim2.fromOffset(14, 14),
                position = UDim2.new(0, 2, 0.5, 0),
                imageColor = Color3.fromRGB(255, 255, 255),
                transparency = 0.5
            })
            toggleCircle.AnchorPoint = Vector2.new(0, 0.5)
            
            if toggled then
                toggleSlider.BackgroundTransparency = 0
                toggleSlider.UIStroke.Color = currentThemeData.Accent
                toggleCircle.Position = UDim2.new(0, 19, 0.5, 0)
                toggleCircle.ImageTransparency = 0
            end
            
            function toggle:SetValue(value)
                toggled = value
                
                tweenProperty(toggleSlider, "BackgroundTransparency", toggled and 0 or 1, 0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                tweenProperty(toggleSlider.UIStroke, "Color", toggled and currentThemeData.Accent or currentThemeData.ElementColor, 0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                tweenProperty(toggleCircle, "Position", UDim2.new(0, toggled and 19 or 2, 0.5, 0), 0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                tweenProperty(toggleCircle, "ImageTransparency", toggled and 0 or 0.5, 0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                
                if callback then
                    callback(toggled)
                end
            end
            
            toggleFrame.MouseButton1Click:Connect(function()
                toggle:SetValue(not toggled)
            end)
            
            if flag then
                flags[flag] = {
                    value = toggled,
                    SetValue = function(self, value)
                        toggle:SetValue(value)
                    end
                }
            end
            
            return toggle
        end
        
        function tab:AddSlider(text, desc, min, max, default, rounding, callback, flag)
            if not text or text == "" then
                return nil
            end
            
            if not min or not max or min >= max then
                return nil
            end
            
            local slider = {}
            local value = default or min
            local dragging = false
            local container = tab.Content
            
            if flag then
                flags[flag] = {
                    value = value,
                    SetValue = function(self, newValue)
                        value = newValue
                        slider:SetValue(newValue)
                    end
                }
            end
            
            local sliderFrame = createStyledEl("Frame", container, {
                size = UDim2.new(1, 0, 0, 25),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 0.87,
                cornerRadius = 4,
                stroke = {
                    color = currentThemeData.ElementBorder,
                    transparency = 0.5
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            sliderFrame.LayoutOrder = 7
            
            local labelHolder = createStyledEl("Frame", sliderFrame, {
                size = UDim2.new(1, -230, 1, 0),
                position = UDim2.fromOffset(10, 0),
                transparency = 1
            })
            
            createListLayout(labelHolder, 0, Enum.SortOrder.LayoutOrder, Enum.VerticalAlignment.Center, Enum.HorizontalAlignment.Center)
            
            local titleLabel = createStyledEl("TextLabel", labelHolder, {
                text = text,
                size = UDim2.new(1.364, -53, 0, 14),
                font = Enum.Font.GothamMedium,
                textSize = 13,
                textColor = currentThemeData.TextColor,
                textXAlignment = Enum.TextXAlignment.Left,
                theme = {
                    property = "TextColor3",
                    themeProperty = "TextColor"
                }
            })
            
            if desc then
                sliderFrame.Size = UDim2.new(1, 0, 0, 40)
                local descLabel = createStyledEl("TextLabel", labelHolder, {
                    text = desc,
                    size = UDim2.new(1, -230, 0, 14),
                    font = Enum.Font.Gotham,
                    textSize = 12,
                    textColor = currentThemeData.SubTextColor,
                    textXAlignment = Enum.TextXAlignment.Left,
                    theme = {
                        property = "TextColor3",
                        themeProperty = "SubTextColor"
                    }
                })
                descLabel.TextWrapped = true
            end
            
            local valueBox = createStyledEl("TextBox", sliderFrame, {
                text = tostring(value),
                size = UDim2.fromOffset(45, 20),
                position = UDim2.new(1, -215, 0.5, 0),
                font = Enum.Font.Gotham,
                textSize = 12,
                textColor = currentThemeData.TextColor,
                backgroundColor = currentThemeData.ElementColor,
                transparency = 0.7,
                cornerRadius = 4,
                stroke = {
                    color = currentThemeData.ElementBorder,
                    transparency = 0.6
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            valueBox.AnchorPoint = Vector2.new(0, 0.5)
            
            valueBox.FocusLost:Connect(function()
                local num = tonumber(valueBox.Text)
                if num then
                    slider:SetValue(num)
                else
                    valueBox.Text = tostring(value)
                end
            end)
            
            local sliderRail = createStyledEl("Frame", sliderFrame, {
                size = UDim2.new(1, 0, 0, 4),
                position = UDim2.new(1, -10, 0.5, 0),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 0.4,
                cornerRadius = 1,
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            sliderRail.AnchorPoint = Vector2.new(1, 0.5)
            
            createSizeConstraint(sliderRail, nil, Vector2.new(150, math.huge))
            
            local sliderRailInner = createStyledEl("Frame", sliderRail, {
                size = UDim2.new(1, -14, 1, 0),
                position = UDim2.fromOffset(7, 0),
                transparency = 1
            })
            
            local sliderFill = createStyledEl("Frame", sliderRail, {
                size = UDim2.fromScale((value - min) / (max - min), 1),
                backgroundColor = currentThemeData.Accent,
                cornerRadius = 1,
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "Accent"
                }
            })
            
            local sliderDot = createStyledEl("ImageLabel", sliderRailInner, {
                image = "rbxassetid://12266946128",
                size = UDim2.fromOffset(14, 14),
                position = UDim2.new((value - min) / (max - min), -7, 0.5, 0),
                imageColor = currentThemeData.Accent,
                theme = {
                    property = "ImageColor3",
                    themeProperty = "Accent"
                }
            })
            sliderDot.AnchorPoint = Vector2.new(0, 0.5)
            
            local function round(num, bracket)
                if bracket == 0 then
                    return math.floor(num)
                end
                local numstr = tostring(num)
                return numstr:find("%.") and tonumber(numstr:sub(1, numstr:find("%.") + bracket)) or num
            end
            
            local function updateSlider(input)
                local sizeScale = math.clamp((input.Position.X - sliderRailInner.AbsolutePosition.X) / sliderRailInner.AbsoluteSize.X, 0, 1)
                value = round(math.clamp(min + ((max - min) * sizeScale), min, max), rounding)
                
                tweenProperty(sliderDot, "Position", UDim2.new((value - min) / (max - min), -7, 0.5, 0), 0.1, Enum.EasingStyle.Quad)
                sliderFill.Size = UDim2.fromScale((value - min) / (max - min), 1)
                valueBox.Text = tostring(value)
                
                if callback then
                    callback(value)
                end
            end
            
            sliderDot.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)
            
            sliderDot.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input)
                end
            end)
            
            function slider:SetValue(newValue)
                value = math.clamp(newValue, min, max)
                tweenProperty(sliderDot, "Position", UDim2.new((value - min) / (max - min), -7, 0.5, 0), 0.1, Enum.EasingStyle.Quad)
                sliderFill.Size = UDim2.fromScale((value - min) / (max - min), 1)
                valueBox.Text = tostring(value)
                if callback then
                    callback(value)
                end
            end
            
            return slider
        end
        
        function tab:AddButton(text, desc, callback)
            if not text or text == "" then
                return nil
            end
            
            local container = tab.Content
            
            local buttonFrame = createStyledEl("TextButton", container, {
                size = UDim2.new(1, 0, 0, 0),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 0.87,
                cornerRadius = 4,
                stroke = {
                    color = currentThemeData.ElementBorder,
                    transparency = 0.5
                },
                hoverEffects = {
                    hover = 0.8,
                    normal = 0.87,
                    press = 0.94
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            buttonFrame.AutomaticSize = Enum.AutomaticSize.Y
            buttonFrame.LayoutOrder = 7
            
            local labelHolder = createStyledEl("Frame", buttonFrame, {
                size = UDim2.new(1, -60, 0, 0),
                position = UDim2.fromOffset(10, 0),
                transparency = 1
            })
            labelHolder.AutomaticSize = Enum.AutomaticSize.Y
            
            createListLayout(labelHolder, 0, Enum.SortOrder.LayoutOrder, Enum.VerticalAlignment.Center)
            createPadding(labelHolder, 13, 13, 0, 0)
            
            local titleLabel = createStyledEl("TextLabel", labelHolder, {
                text = text,
                size = UDim2.new(1, 0, 0, 14),
                font = Enum.Font.GothamMedium,
                textSize = 13,
                textColor = currentThemeData.TextColor,
                textXAlignment = Enum.TextXAlignment.Left,
                theme = {
                    property = "TextColor3",
                    themeProperty = "TextColor"
                }
            })
            
            if desc then
                local descLabel = createStyledEl("TextLabel", labelHolder, {
                    text = desc,
                    size = UDim2.new(1, 0, 0, 14),
                    font = Enum.Font.Gotham,
                    textSize = 12,
                    textColor = currentThemeData.SubTextColor,
                    textXAlignment = Enum.TextXAlignment.Left,
                    theme = {
                        property = "TextColor3",
                        themeProperty = "SubTextColor"
                    }
                })
                descLabel.TextWrapped = true
                descLabel.AutomaticSize = Enum.AutomaticSize.Y
            end
            
            local buttonText = createStyledEl("TextLabel", buttonFrame, {
                text = "Press",
                size = UDim2.fromOffset(45, 20),
                position = UDim2.new(1, -10, 0.5, 0),
                font = Enum.Font.Gotham,
                textSize = 14,
                textColor = currentThemeData.SubTextColor
            })
            buttonText.AnchorPoint = Vector2.new(1, 0.5)
            
            buttonFrame.MouseButton1Click:Connect(function()
                if callback then
                    callback()
                end
            end)
        end
        
        function tab:AddDropdown(text, desc, options, default, callback, flag)
            if not text or text == "" then
                return nil
            end
            
            if not options or #options == 0 then
                return nil
            end
            
            local dropdown = {}
            local selectedOption = default or options[1]
            local isOpen = false
            local container = tab.Content
            
            if flag then
                flags[flag] = {
                    value = selectedOption,
                    SetValue = function(self, value)
                        selectedOption = value
                        dropdown:SetValue(value)
                    end
                }
            end
            
            local dropdownFrame = createStyledEl("Frame", container, {
                size = UDim2.new(1, 0, 0, 0),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 0.87,
                cornerRadius = 4,
                stroke = {
                    color = currentThemeData.ElementBorder,
                    transparency = 0.5
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            dropdownFrame.AutomaticSize = Enum.AutomaticSize.Y
            dropdownFrame.LayoutOrder = 7
            dropdownFrame.ClipsDescendants = true
            
            local labelHolder = createStyledEl("Frame", dropdownFrame, {
                size = UDim2.new(1, -60, 0, 0),
                position = UDim2.fromOffset(10, 0),
                transparency = 1
            })
            labelHolder.AutomaticSize = Enum.AutomaticSize.Y
            
            createListLayout(labelHolder, 0, Enum.SortOrder.LayoutOrder, Enum.VerticalAlignment.Center)
            createPadding(labelHolder, 13, 13, 0, 0)
            
            local titleLabel = createStyledEl("TextLabel", labelHolder, {
                text = text,
                size = UDim2.new(1, 0, 0, 14),
                font = Enum.Font.GothamMedium,
                textSize = 13,
                textColor = currentThemeData.TextColor,
                textXAlignment = Enum.TextXAlignment.Left,
                theme = {
                    property = "TextColor3",
                    themeProperty = "TextColor"
                }
            })
            
            if desc then
                local descLabel = createStyledEl("TextLabel", labelHolder, {
                    text = desc,
                    size = UDim2.new(1, 0, 0, 14),
                    font = Enum.Font.Gotham,
                    textSize = 12,
                    textColor = currentThemeData.SubTextColor,
                    textXAlignment = Enum.TextXAlignment.Left,
                    theme = {
                        property = "TextColor3",
                        themeProperty = "SubTextColor"
                    }
                })
                descLabel.TextWrapped = true
                descLabel.AutomaticSize = Enum.AutomaticSize.Y
            end
            
            local dropdownButton = createStyledEl("TextButton", dropdownFrame, {
                size = UDim2.fromOffset(24, 27),
                position = UDim2.new(1, -10, 0, 21),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 1,
                cornerRadius = 4,
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            dropdownButton.AnchorPoint = Vector2.new(1, 0.5)
            dropdownButton.Font = Enum.Font.Cartoon
            dropdownButton.Text = "<"
            dropdownButton.TextColor3 = currentThemeData.TextColor
            dropdownButton.TextSize = 19
            dropdownButton.Rotation = -90
            dropdownButton.AutoButtonColor = false
            
            local scrollFrame = createStyledEl("ScrollingFrame", dropdownFrame, {
                size = UDim2.new(1, -20, 1, -40),
                position = UDim2.fromOffset(10, 36),
                transparency = 1
            })
            scrollFrame.ScrollBarThickness = 3
            scrollFrame.ScrollBarImageColor3 = currentThemeData.Accent
            scrollFrame.ScrollBarImageTransparency = 1
            scrollFrame.CanvasSize = UDim2.fromScale(0, 0)
            scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
            scrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
            scrollFrame.Visible = false
            scrollFrame.Theme = {
                property = "ScrollBarImageColor3",
                themeProperty = "Accent"
            }
            
            createListLayout(scrollFrame, 2, Enum.SortOrder.LayoutOrder)
            createPadding(scrollFrame, 5, 5, 0, 0)
            
            for _, option in ipairs(options) do
                local optionButton = createStyledEl("TextButton", scrollFrame, {
                    size = UDim2.new(1, 0, 0, 25),
                    backgroundColor = currentThemeData.ElementColor,
                    transparency = 0.8,
                    cornerRadius = 4,
                    theme = {
                        property = "BackgroundColor3",
                        themeProperty = "ElementColor"
                    }
                })
                optionButton.Text = option
                optionButton.Font = Enum.Font.Gotham
                optionButton.TextColor3 = currentThemeData.TextColor
                optionButton.TextSize = 12
                optionButton.AutoButtonColor = false
                
                local indicatorLine = createStyledEl("Frame", optionButton, {
                    size = UDim2.new(0, 3, 1, -4),
                    position = UDim2.fromOffset(2, 2),
                    backgroundColor = currentThemeData.Accent,
                    transparency = 0,
                    cornerRadius = 1,
                    theme = {
                        property = "BackgroundColor3",
                        themeProperty = "Accent"
                    }
                })
                indicatorLine.Visible = (selectedOption == option)
                
                optionButton.MouseButton1Click:Connect(function()
                    selectedOption = option
                    isOpen = false
                    scrollFrame.Visible = false
                    tweenProperty(dropdownFrame, "Size", UDim2.new(1, 0, 0, 0), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(dropdownButton, "Size", UDim2.fromOffset(24, 27), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(dropdownButton, "Rotation", -90, 0.4, Enum.EasingStyle.Quint)
                    
                    for _, child in ipairs(scrollFrame:GetChildren()) do
                        if child:IsA("TextButton") then
                            local indicator = child:FindFirstChild("Frame")
                            if indicator then
                                indicator.Visible = (child.Text == selectedOption)
                            end
                        end
                    end
                    
                    if callback then
                        callback(selectedOption)
                    end
                end)
                
                applyHoverEffects(optionButton, 0.6, 0.8, 0.4)
            end
            
            dropdownButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                if isOpen then
                    local listSize = math.min(#options * 27 + 10, 150)
                    tweenProperty(dropdownFrame, "Size", UDim2.new(1, 0, 0, listSize + 36), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(dropdownButton, "Size", UDim2.fromOffset(27, 27), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(dropdownButton, "Rotation", 90, 0.4, Enum.EasingStyle.Quint)
                    task.wait(0.2)
                    scrollFrame.Visible = true
                else
                    scrollFrame.Visible = false
                    tweenProperty(dropdownFrame, "Size", UDim2.new(1, 0, 0, 0), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(dropdownButton, "Size", UDim2.fromOffset(24, 27), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(dropdownButton, "Rotation", -90, 0.4, Enum.EasingStyle.Quint)
                end
            end)
            
            function dropdown:SetValue(value)
                selectedOption = value
                for _, child in ipairs(scrollFrame:GetChildren()) do
                    if child:IsA("TextButton") then
                        local indicator = child:FindFirstChild("Frame")
                        if indicator then
                            indicator.Visible = (child.Text == selectedOption)
                        end
                    end
                end
            end
            
            return dropdown
        end
        
        function tab:AddMultiDropdown(text, desc, options, defaults, callback, flag)
            if not text or text == "" then
                return nil
            end
            
            if not options or #options == 0 then
                return nil
            end
            
            local multiDropdown = {}
            local selectedOptions = {}
            for _, v in ipairs(defaults or {}) do
                selectedOptions[v] = true
            end
            local isOpen = false
            local container = tab.Content
            
            if flag then
                flags[flag] = {
                    value = selectedOptions,
                    SetValue = function(self, value)
                        selectedOptions = value
                        multiDropdown:SetValue(value)
                    end
                }
            end
            
            local function getSelectedText()
                local selected = {}
                for opt, isSelected in pairs(selectedOptions) do
                    if isSelected then
                        table.insert(selected, opt)
                    end
                end
                return #selected > 0 and table.concat(selected, ", ") or "None"
            end
            
            local multiDropdownFrame = createStyledEl("Frame", container, {
                size = UDim2.new(1, 0, 0, 0),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 0.87,
                cornerRadius = 4,
                stroke = {
                    color = currentThemeData.ElementBorder,
                    transparency = 0.5
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            multiDropdownFrame.AutomaticSize = Enum.AutomaticSize.Y
            multiDropdownFrame.LayoutOrder = 7
            multiDropdownFrame.ClipsDescendants = true
            
            local labelHolder = createStyledEl("Frame", multiDropdownFrame, {
                size = UDim2.new(1, -60, 0, 0),
                position = UDim2.fromOffset(10, 0),
                transparency = 1
            })
            labelHolder.AutomaticSize = Enum.AutomaticSize.Y
            
            createListLayout(labelHolder, 0, Enum.SortOrder.LayoutOrder, Enum.VerticalAlignment.Center)
            createPadding(labelHolder, 13, 13, 0, 0)
            
            local titleLabel = createStyledEl("TextLabel", labelHolder, {
                text = text,
                size = UDim2.new(1, 0, 0, 14),
                font = Enum.Font.GothamMedium,
                textSize = 13,
                textColor = currentThemeData.TextColor,
                textXAlignment = Enum.TextXAlignment.Left,
                theme = {
                    property = "TextColor3",
                    themeProperty = "TextColor"
                }
            })
            
            if desc then
                local descLabel = createStyledEl("TextLabel", labelHolder, {
                    text = desc,
                    size = UDim2.new(1, 0, 0, 14),
                    font = Enum.Font.Gotham,
                    textSize = 12,
                    textColor = currentThemeData.SubTextColor,
                    textXAlignment = Enum.TextXAlignment.Left,
                    theme = {
                        property = "TextColor3",
                        themeProperty = "SubTextColor"
                    }
                })
                descLabel.TextWrapped = true
                descLabel.AutomaticSize = Enum.AutomaticSize.Y
            end
            
            local multiDropdownButton = createStyledEl("TextButton", multiDropdownFrame, {
                size = UDim2.fromOffset(24, 27),
                position = UDim2.new(1, -10, 0, 21),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 1,
                cornerRadius = 4,
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            multiDropdownButton.AnchorPoint = Vector2.new(1, 0.5)
            multiDropdownButton.Font = Enum.Font.Cartoon
            multiDropdownButton.Text = "<"
            multiDropdownButton.TextColor3 = currentThemeData.TextColor
            multiDropdownButton.TextSize = 19
            multiDropdownButton.Rotation = -90
            multiDropdownButton.AutoButtonColor = false
            
            local scrollFrame = createStyledEl("ScrollingFrame", multiDropdownFrame, {
                size = UDim2.new(1, -20, 1, -40),
                position = UDim2.fromOffset(10, 36),
                transparency = 1
            })
            scrollFrame.ScrollBarThickness = 3
            scrollFrame.ScrollBarImageColor3 = currentThemeData.Accent
            scrollFrame.ScrollBarImageTransparency = 1
            scrollFrame.CanvasSize = UDim2.fromScale(0, 0)
            scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
            scrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
            scrollFrame.Visible = false
            scrollFrame.Theme = {
                property = "ScrollBarImageColor3",
                themeProperty = "Accent"
            }
            
            createListLayout(scrollFrame, 2, Enum.SortOrder.LayoutOrder)
            createPadding(scrollFrame, 5, 5, 0, 0)
            
            for _, option in ipairs(options) do
                local optionButton = createStyledEl("TextButton", scrollFrame, {
                    size = UDim2.new(1, 0, 0, 25),
                    backgroundColor = currentThemeData.ElementColor,
                    transparency = 0.8,
                    cornerRadius = 4,
                    theme = {
                        property = "BackgroundColor3",
                        themeProperty = "ElementColor"
                    }
                })
                optionButton.Text = option
                optionButton.Font = Enum.Font.Gotham
                optionButton.TextColor3 = currentThemeData.TextColor
                optionButton.TextSize = 12
                optionButton.AutoButtonColor = false
                
                local indicatorLine = createStyledEl("Frame", optionButton, {
                    size = UDim2.new(0, 3, 1, -4),
                    position = UDim2.fromOffset(2, 2),
                    backgroundColor = currentThemeData.Accent,
                    transparency = 0,
                    cornerRadius = 1,
                    theme = {
                        property = "BackgroundColor3",
                        themeProperty = "Accent"
                    }
                })
                indicatorLine.Visible = selectedOptions[option]
                
                optionButton.MouseButton1Click:Connect(function()
                    selectedOptions[option] = not selectedOptions[option]
                    indicatorLine.Visible = selectedOptions[option]
                    if callback then
                        callback(selectedOptions)
                    end
                end)
                
                applyHoverEffects(optionButton, 0.6, 0.8, 0.4)
            end
            
            multiDropdownButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                if isOpen then
                    local listSize = math.min(#options * 27 + 10, 150)
                    tweenProperty(multiDropdownFrame, "Size", UDim2.new(1, 0, 0, listSize + 36), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(multiDropdownButton, "Size", UDim2.fromOffset(27, 27), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(multiDropdownButton, "Rotation", 90, 0.4, Enum.EasingStyle.Quint)
                    task.wait(0.2)
                    scrollFrame.Visible = true
                else
                    scrollFrame.Visible = false
                    tweenProperty(multiDropdownFrame, "Size", UDim2.new(1, 0, 0, 0), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(multiDropdownButton, "Size", UDim2.fromOffset(24, 27), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(multiDropdownButton, "Rotation", -90, 0.4, Enum.EasingStyle.Quint)
                end
            end)
            
            function multiDropdown:SetValue(value)
                selectedOptions = value
                for _, option in ipairs(options) do
                    local optionButton = scrollFrame:FindFirstChild(option)
                    if optionButton then
                        local indicator = optionButton:FindFirstChild("Frame")
                        if indicator then
                            indicator.Visible = selectedOptions[option]
                        end
                    end
                end
            end
            
            function multiDropdown:GetSelected()
                return selectedOptions
            end
            
            return multiDropdown
        end
        
        function tab:AddRGBPicker(text, desc, default, callback, flag)
            if not text or text == "" then
                return nil
            end
            
            local rgbPicker = {}
            local currentColor = default or Color3.fromRGB(255, 255, 255)
            local isOpen = false
            local container = tab.Content
            
            if flag then
                flags[flag] = {
                    value = currentColor,
                    SetValue = function(self, value)
                        currentColor = value
                        if rgbPicker.SetValue then
                            rgbPicker:SetValue(value)
                        end
                    end
                }
            end
            
            local rgbFrame = createStyledEl("Frame", container, {
                size = UDim2.new(1, 0, 0, 0),
                transparency = 1
            })
            rgbFrame.AutomaticSize = Enum.AutomaticSize.Y
            rgbFrame.LayoutOrder = 7
            rgbFrame.ClipsDescendants = true
            
            local rgbButton = createStyledEl("TextButton", rgbFrame, {
                size = UDim2.new(1, 0, 0, 0),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 0.87,
                cornerRadius = 4,
                stroke = {
                    color = currentThemeData.ElementBorder,
                    transparency = 0.5
                },
                hoverEffects = {
                    hover = 0.8,
                    normal = 0.87,
                    press = 0.94
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            rgbButton.AutomaticSize = Enum.AutomaticSize.Y
            rgbButton.Text = ""
            rgbButton.AutoButtonColor = false
            
            local labelHolder = createStyledEl("Frame", rgbButton, {
                size = UDim2.new(1, -64, 0, 0),
                position = UDim2.fromOffset(10, 0),
                transparency = 1
            })
            labelHolder.AutomaticSize = Enum.AutomaticSize.Y
            
            createListLayout(labelHolder, 0, Enum.SortOrder.LayoutOrder, Enum.VerticalAlignment.Center)
            createPadding(labelHolder, 13, 13, 0, 0)
            
            local titleLabel = createStyledEl("TextLabel", labelHolder, {
                text = text,
                size = UDim2.new(1, 0, 0, 14),
                font = Enum.Font.GothamMedium,
                textSize = 13,
                textColor = currentThemeData.TextColor,
                textXAlignment = Enum.TextXAlignment.Left,
                theme = {
                    property = "TextColor3",
                    themeProperty = "TextColor"
                }
            })
            
            if desc then
                local descLabel = createStyledEl("TextLabel", labelHolder, {
                    text = desc,
                    size = UDim2.new(1, 0, 0, 14),
                    font = Enum.Font.Gotham,
                    textSize = 12,
                    textColor = currentThemeData.SubTextColor,
                    textXAlignment = Enum.TextXAlignment.Left,
                    theme = {
                        property = "TextColor3",
                        themeProperty = "SubTextColor"
                    }
                })
                descLabel.TextWrapped = true
                descLabel.AutomaticSize = Enum.AutomaticSize.Y
            end
            
            local colorPreview = createStyledEl("Frame", rgbButton, {
                size = UDim2.fromOffset(26, 14),
                position = UDim2.new(1, -10, 0.5, 0),
                backgroundColor = currentColor,
                transparency = 0,
                cornerRadius = 1
            })
            colorPreview.AnchorPoint = Vector2.new(1, 0.5)
            
            local slidersContainer = createStyledEl("Frame", rgbFrame, {
                size = UDim2.new(1, 0, 0, 0),
                position = UDim2.fromOffset(0, 60),
                backgroundColor = currentThemeData.ElementColor,
                transparency = 0.87,
                cornerRadius = 4,
                stroke = {
                    color = currentThemeData.ElementBorder,
                    transparency = 0.5
                },
                theme = {
                    property = "BackgroundColor3",
                    themeProperty = "ElementColor"
                }
            })
            slidersContainer.ClipsDescendants = true
            
            createListLayout(slidersContainer, 8, Enum.SortOrder.LayoutOrder)
            createPadding(slidersContainer, 10, 10, 10, 10)
            
            local function createColorSlider(colorName, colorIndex, initialValue)
                local sliderFrame = createStyledEl("Frame", slidersContainer, {
                    size = UDim2.new(1, 0, 0, 30),
                    transparency = 1
                })
                
                local sliderLabel = createStyledEl("TextLabel", sliderFrame, {
                    text = colorName,
                    size = UDim2.fromOffset(15, 12),
                    position = UDim2.fromOffset(0, 0),
                    font = Enum.Font.GothamMedium,
                    textSize = 11,
                    textColor = currentThemeData.TextColor,
                    textXAlignment = Enum.TextXAlignment.Left,
                    theme = {
                        property = "TextColor3",
                        themeProperty = "TextColor"
                    }
                })
                
                local sliderValue = createStyledEl("TextBox", sliderFrame, {
                    size = UDim2.fromOffset(30, 12),
                    position = UDim2.new(1, 0, 0, 0),
                    text = tostring(initialValue),
                    font = Enum.Font.Gotham,
                    textSize = 11,
                    textColor = currentThemeData.Accent,
                    textXAlignment = Enum.TextXAlignment.Right,
                    theme = {
                        property = "TextColor3",
                        themeProperty = "Accent"
                    }
                })
                sliderValue.AnchorPoint = Vector2.new(1, 0)
                sliderValue.ClearTextOnFocus = false
                sliderValue.TextEditable = true
                
                local sliderBar = createStyledEl("Frame", sliderFrame, {
                    size = UDim2.new(1, 0, 0, 6),
                    position = UDim2.fromOffset(0, 18),
                    backgroundColor = Color3.fromRGB(
                        math.max(currentThemeData.Accent.R * 255 * 0.3, 0),
                        math.max(currentThemeData.Accent.G * 255 * 0.3, 0),
                        math.max(currentThemeData.Accent.B * 255 * 0.3, 0)
                    ),
                    transparency = 0,
                    cornerRadius = 1,
                    name = "sliderBar"
                })
                
                local sliderFill = createStyledEl("Frame", sliderBar, {
                    size = UDim2.new(initialValue / 255, 0, 1, 0),
                    backgroundColor = currentThemeData.Accent,
                    transparency = 0,
                    cornerRadius = 1,
                    theme = {
                        property = "BackgroundColor3",
                        themeProperty = "Accent"
                    }
                })
                
                local sliderKnob = createStyledEl("Frame", sliderBar, {
                    size = UDim2.fromOffset(14, 14),
                    position = UDim2.new(initialValue / 255, 0, 0.5, 0),
                    backgroundColor = currentThemeData.Accent,
                    transparency = 0,
                    cornerRadius = 1,
                    theme = {
                        property = "BackgroundColor3",
                        themeProperty = "Accent"
                    }
                })
                sliderKnob.AnchorPoint = Vector2.new(0.5, 0.5)
                
                createStroke(sliderKnob, currentThemeData.ElementBorder, 0.3, 2)
                
                local sliderButton = createStyledEl("TextButton", sliderBar, {
                    size = UDim2.new(1, 0, 1, 0),
                    transparency = 1,
                    text = ""
                })
                
                local currentSliderValue = initialValue
                local dragging = false
                
                local function updateSlider(input)
                    local pos = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                    currentSliderValue = math.floor(pos * 255 + 0.5)
                    currentSliderValue = math.clamp(currentSliderValue, 0, 255)
                    
                    tweenProperty(sliderFill, "Size", UDim2.new(currentSliderValue / 255, 0, 1, 0), 0.1, Enum.EasingStyle.Quad)
                    tweenProperty(sliderKnob, "Position", UDim2.new(currentSliderValue / 255, 0, 0.5, 0), 0.1, Enum.EasingStyle.Quad)
                    
                    sliderValue.Text = tostring(currentSliderValue)
                    local r, g, b = currentColor.R * 255, currentColor.G * 255, currentColor.B * 255
                    if colorIndex == 1 then r = currentSliderValue
                    elseif colorIndex == 2 then g = currentSliderValue
                    else b = currentSliderValue end
                    currentColor = Color3.fromRGB(r, g, b)
                    colorPreview.BackgroundColor3 = currentColor
                    if callback then
                        callback(currentColor)
                    end
                end
                
                sliderButton.MouseButton1Down:Connect(function()
                    dragging = true
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateSlider(input)
                    end
                end)
                
                sliderButton.MouseButton1Click:Connect(function(input)
                    updateSlider(input)
                end)
                
                sliderValue.FocusLost:Connect(function()
                    local inputValue = tonumber(sliderValue.Text)
                    if inputValue then
                        currentSliderValue = math.floor(inputValue + 0.5)
                        currentSliderValue = math.clamp(currentSliderValue, 0, 255)
                        
                        tweenProperty(sliderFill, "Size", UDim2.new(currentSliderValue / 255, 0, 1, 0), 0.2, Enum.EasingStyle.Quad)
                        tweenProperty(sliderKnob, "Position", UDim2.new(currentSliderValue / 255, 0, 0.5, 0), 0.2, Enum.EasingStyle.Quad)
                        
                        sliderValue.Text = tostring(currentSliderValue)
                        local r, g, b = currentColor.R * 255, currentColor.G * 255, currentColor.B * 255
                        if colorIndex == 1 then r = currentSliderValue
                        elseif colorIndex == 2 then g = currentSliderValue
                        else b = currentSliderValue end
                        currentColor = Color3.fromRGB(r, g, b)
                        colorPreview.BackgroundColor3 = currentColor
                        if callback then
                            callback(currentColor)
                        end
                    else
                        sliderValue.Text = tostring(currentSliderValue)
                    end
                end)
                
                return {
                    SetValue = function(value)
                        currentSliderValue = math.clamp(value, 0, 255)
                        tweenProperty(sliderFill, "Size", UDim2.new(currentSliderValue / 255, 0, 1, 0), 0.2, Enum.EasingStyle.Quad)
                        tweenProperty(sliderKnob, "Position", UDim2.new(currentSliderValue / 255, 0, 0.5, 0), 0.2, Enum.EasingStyle.Quad)
                        sliderValue.Text = tostring(currentSliderValue)
                    end
                }
            end
            
            local rSlider = createColorSlider("R", 1, math.floor(currentColor.R * 255))
            local gSlider = createColorSlider("G", 2, math.floor(currentColor.G * 255))
            local bSlider = createColorSlider("B", 3, math.floor(currentColor.B * 255))
            
            local function tweenRGBLabels(transparency)
                for _, child in ipairs(slidersContainer:GetChildren()) do
                    if child:IsA("Frame") then
                        local label = child:FindFirstChild("TextLabel")
                        local value = child:FindFirstChild("TextBox")
                        if label then
                            tweenProperty(label, "TextTransparency", transparency, 0.3)
                        end
                        if value then
                            tweenProperty(value, "TextTransparency", transparency, 0.3)
                        end
                    end
                end
            end
            
            task.wait()
            local buttonHeight = rgbButton.AbsoluteSize.Y
            rgbFrame.Size = UDim2.new(1, 0, 0, buttonHeight)
            
            rgbButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                if isOpen then
                    tweenProperty(rgbFrame, "Size", UDim2.new(1, 0, 0, buttonHeight + 133), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(slidersContainer, "Size", UDim2.new(1, 0, 0, 130), 0.4, Enum.EasingStyle.Quint)
                    tweenRGBLabels(0)
                else
                    tweenRGBLabels(1)
                    tweenProperty(rgbFrame, "Size", UDim2.new(1, 0, 0, buttonHeight), 0.4, Enum.EasingStyle.Quint)
                    tweenProperty(slidersContainer, "Size", UDim2.new(1, 0, 0, 0), 0.4, Enum.EasingStyle.Quint)
                end
            end)
            
            function rgbPicker:SetValue(color)
                currentColor = color
                colorPreview.BackgroundColor3 = color
                rSlider.SetValue(math.floor(color.R * 255))
                gSlider.SetValue(math.floor(color.G * 255))
                bSlider.SetValue(math.floor(color.B * 255))
            end
            
            return rgbPicker
        end
        
        return tab
    end
    
    function window:SelectTab(tabIndex)
        if not tabIndex or not window.tabs[tabIndex] then
            return false
        end
        
        window.selectedTab = tabIndex
        
        for _, tabObj in pairs(window.tabs) do
            tweenProperty(tabObj.Frame, "BackgroundTransparency", 1, 0.2, Enum.EasingStyle.Quad)
            tweenProperty(tabObj.Label, "TextColor3", Color3.fromRGB(135, 135, 140), 0.2, Enum.EasingStyle.Quad)
            if tabObj.Icon then
                tweenProperty(tabObj.Icon, "ImageColor3", Color3.fromRGB(135, 135, 140), 0.2, Enum.EasingStyle.Quad)
            end
            tabObj.Content.Visible = false
            tabObj.Selected = false
        end
        
        local selectedTab = window.tabs[tabIndex]
        tweenProperty(selectedTab.Frame, "BackgroundTransparency", 0.89, 0.2, Enum.EasingStyle.Quad)
        tweenProperty(selectedTab.Label, "TextColor3", Color3.fromRGB(245, 245, 250), 0.2, Enum.EasingStyle.Quad)
        if selectedTab.Icon then
            tweenProperty(selectedTab.Icon, "ImageColor3", Color3.fromRGB(245, 245, 250), 0.2, Enum.EasingStyle.Quad)
        end
        selectedTab.Content.Visible = true
        selectedTab.Selected = true
        
        return true
    end
    
    task.wait(1)
    mainFrame.Visible = true
    tweenProperty(mainFrame, "Size", windowSize, 0.5)
    
    activeWindow = window
    
    local cleanupConnection = RunService.Heartbeat:Connect(function()
        if not screenGui.Parent then
            cleanupExistingUI()
        end
    end)
    table.insert(cleanupConnections, cleanupConnection)
    
    return window
end

Vynixus.ShowNotification("Vynixus", "Loaded Vynixus library", "success")
Vynixus.ShowNotification("Testing Notifications", "Test description", "success")

return Vynixus
